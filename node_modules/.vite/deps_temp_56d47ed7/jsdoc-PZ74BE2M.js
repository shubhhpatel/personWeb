import {
  javadoclike
} from "./chunk-EXJXJJ6K.js";
import {
  typescript
} from "./chunk-GFPKG46S.js";
import {
  javascript
} from "./chunk-U7UIIK2P.js";
import "./chunk-2M5PTPZJ.js";
import "./chunk-ROME4SDB.js";

// node_modules/refractor/lang/jsdoc.js
jsdoc.displayName = "jsdoc";
jsdoc.aliases = [];
function jsdoc(Prism) {
  Prism.register(javadoclike);
  Prism.register(javascript);
  Prism.register(typescript);
  (function(Prism2) {
    var javascript2 = Prism2.languages.javascript;
    var type = /\{(?:[^{}]|\{(?:[^{}]|\{[^{}]*\})*\})+\}/.source;
    var parameterPrefix = "(@(?:arg|argument|param|property)\\s+(?:" + type + "\\s+)?)";
    Prism2.languages.jsdoc = Prism2.languages.extend("javadoclike", {
      parameter: {
        // @param {string} foo - foo bar
        pattern: RegExp(
          parameterPrefix + /(?:(?!\s)[$\w\xA0-\uFFFF.])+(?=\s|$)/.source
        ),
        lookbehind: true,
        inside: {
          punctuation: /\./
        }
      }
    });
    Prism2.languages.insertBefore("jsdoc", "keyword", {
      "optional-parameter": {
        // @param {string} [baz.foo="bar"] foo bar
        pattern: RegExp(
          parameterPrefix + /\[(?:(?!\s)[$\w\xA0-\uFFFF.])+(?:=[^[\]]+)?\](?=\s|$)/.source
        ),
        lookbehind: true,
        inside: {
          parameter: {
            pattern: /(^\[)[$\w\xA0-\uFFFF\.]+/,
            lookbehind: true,
            inside: {
              punctuation: /\./
            }
          },
          code: {
            pattern: /(=)[\s\S]*(?=\]$)/,
            lookbehind: true,
            inside: javascript2,
            alias: "language-javascript"
          },
          punctuation: /[=[\]]/
        }
      },
      "class-name": [
        {
          pattern: RegExp(
            /(@(?:augments|class|extends|interface|memberof!?|template|this|typedef)\s+(?:<TYPE>\s+)?)[A-Z]\w*(?:\.[A-Z]\w*)*/.source.replace(
              /<TYPE>/g,
              function() {
                return type;
              }
            )
          ),
          lookbehind: true,
          inside: {
            punctuation: /\./
          }
        },
        {
          pattern: RegExp("(@[a-z]+\\s+)" + type),
          lookbehind: true,
          inside: {
            string: javascript2.string,
            number: javascript2.number,
            boolean: javascript2.boolean,
            keyword: Prism2.languages.typescript.keyword,
            operator: /=>|\.\.\.|[&|?:*]/,
            punctuation: /[.,;=<>{}()[\]]/
          }
        }
      ],
      example: {
        pattern: /(@example\s+(?!\s))(?:[^@\s]|\s+(?!\s))+?(?=\s*(?:\*\s*)?(?:@\w|\*\/))/,
        lookbehind: true,
        inside: {
          code: {
            pattern: /^([\t ]*(?:\*\s*)?)\S.*$/m,
            lookbehind: true,
            inside: javascript2,
            alias: "language-javascript"
          }
        }
      }
    });
    Prism2.languages.javadoclike.addSupport("javascript", Prism2.languages.jsdoc);
  })(Prism);
}
export {
  jsdoc as default
};
//# sourceMappingURL=jsdoc-PZ74BE2M.js.map
