{
  "version": 3,
  "sources": ["../../refractor/lang/actionscript.js"],
  "sourcesContent": ["// @ts-nocheck\nimport refractorJavascript from './javascript.js'\nactionscript.displayName = 'actionscript'\nactionscript.aliases = []\n\n/** @type {import('../core.js').Syntax} */\nexport default function actionscript(Prism) {\n  Prism.register(refractorJavascript)\n  Prism.languages.actionscript = Prism.languages.extend('javascript', {\n    keyword:\n      /\\b(?:as|break|case|catch|class|const|default|delete|do|dynamic|each|else|extends|final|finally|for|function|get|if|implements|import|in|include|instanceof|interface|internal|is|namespace|native|new|null|override|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|use|var|void|while|with)\\b/,\n    operator: /\\+\\+|--|(?:[+\\-*\\/%^]|&&?|\\|\\|?|<<?|>>?>?|[!=]=?)=?|[~?@]/\n  })\n  Prism.languages.actionscript['class-name'].alias = 'function'\n\n  // doesn't work with AS because AS is too complex\n  delete Prism.languages.actionscript['parameter']\n  delete Prism.languages.actionscript['literal-property']\n  if (Prism.languages.markup) {\n    Prism.languages.insertBefore('actionscript', 'string', {\n      xml: {\n        pattern:\n          /(^|[^.])<\\/?\\w+(?:\\s+[^\\s>\\/=]+=(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\])*\\2)*\\s*\\/?>/,\n        lookbehind: true,\n        inside: Prism.languages.markup\n      }\n    })\n  }\n}\n"],
  "mappings": ";;;;;;;AAEA,aAAa,cAAc;AAC3B,aAAa,UAAU,CAAC;AAGT,SAAR,aAA8B,OAAO;AAC1C,QAAM,SAAS,UAAmB;AAClC,QAAM,UAAU,eAAe,MAAM,UAAU,OAAO,cAAc;AAAA,IAClE,SACE;AAAA,IACF,UAAU;AAAA,EACZ,CAAC;AACD,QAAM,UAAU,aAAa,YAAY,EAAE,QAAQ;AAGnD,SAAO,MAAM,UAAU,aAAa,WAAW;AAC/C,SAAO,MAAM,UAAU,aAAa,kBAAkB;AACtD,MAAI,MAAM,UAAU,QAAQ;AAC1B,UAAM,UAAU,aAAa,gBAAgB,UAAU;AAAA,MACrD,KAAK;AAAA,QACH,SACE;AAAA,QACF,YAAY;AAAA,QACZ,QAAQ,MAAM,UAAU;AAAA,MAC1B;AAAA,IACF,CAAC;AAAA,EACH;AACF;",
  "names": []
}
