import {
  haskell
} from "./chunk-FUCEGSPP.js";
import "./chunk-ROME4SDB.js";

// node_modules/refractor/lang/idris.js
idris.displayName = "idris";
idris.aliases = ["idr"];
function idris(Prism) {
  Prism.register(haskell);
  Prism.languages.idris = Prism.languages.extend("haskell", {
    comment: {
      pattern: /(?:(?:--|\|\|\|).*$|\{-[\s\S]*?-\})/m
    },
    keyword: /\b(?:Type|case|class|codata|constructor|corecord|data|do|dsl|else|export|if|implementation|implicit|import|impossible|in|infix|infixl|infixr|instance|interface|let|module|mutual|namespace|of|parameters|partial|postulate|private|proof|public|quoteGoal|record|rewrite|syntax|then|total|using|where|with)\b/,
    builtin: void 0
  });
  Prism.languages.insertBefore("idris", "keyword", {
    "import-statement": {
      pattern: /(^\s*import\s+)(?:[A-Z][\w']*)(?:\.[A-Z][\w']*)*/m,
      lookbehind: true,
      inside: {
        punctuation: /\./
      }
    }
  });
  Prism.languages.idr = Prism.languages.idris;
}
export {
  idris as default
};
//# sourceMappingURL=idris-LDNDFI2R.js.map
