{
  "version": 3,
  "sources": ["../../refractor/lang/idris.js"],
  "sourcesContent": ["// @ts-nocheck\nimport refractorHaskell from './haskell.js'\nidris.displayName = 'idris'\nidris.aliases = ['idr']\n\n/** @type {import('../core.js').Syntax} */\nexport default function idris(Prism) {\n  Prism.register(refractorHaskell)\n  Prism.languages.idris = Prism.languages.extend('haskell', {\n    comment: {\n      pattern: /(?:(?:--|\\|\\|\\|).*$|\\{-[\\s\\S]*?-\\})/m\n    },\n    keyword:\n      /\\b(?:Type|case|class|codata|constructor|corecord|data|do|dsl|else|export|if|implementation|implicit|import|impossible|in|infix|infixl|infixr|instance|interface|let|module|mutual|namespace|of|parameters|partial|postulate|private|proof|public|quoteGoal|record|rewrite|syntax|then|total|using|where|with)\\b/,\n    builtin: undefined\n  })\n  Prism.languages.insertBefore('idris', 'keyword', {\n    'import-statement': {\n      pattern: /(^\\s*import\\s+)(?:[A-Z][\\w']*)(?:\\.[A-Z][\\w']*)*/m,\n      lookbehind: true,\n      inside: {\n        punctuation: /\\./\n      }\n    }\n  })\n  Prism.languages.idr = Prism.languages.idris\n}\n"],
  "mappings": ";;;;;;AAEA,MAAM,cAAc;AACpB,MAAM,UAAU,CAAC,KAAK;AAGP,SAAR,MAAuB,OAAO;AACnC,QAAM,SAAS,OAAgB;AAC/B,QAAM,UAAU,QAAQ,MAAM,UAAU,OAAO,WAAW;AAAA,IACxD,SAAS;AAAA,MACP,SAAS;AAAA,IACX;AAAA,IACA,SACE;AAAA,IACF,SAAS;AAAA,EACX,CAAC;AACD,QAAM,UAAU,aAAa,SAAS,WAAW;AAAA,IAC/C,oBAAoB;AAAA,MAClB,SAAS;AAAA,MACT,YAAY;AAAA,MACZ,QAAQ;AAAA,QACN,aAAa;AAAA,MACf;AAAA,IACF;AAAA,EACF,CAAC;AACD,QAAM,UAAU,MAAM,MAAM,UAAU;AACxC;",
  "names": []
}
