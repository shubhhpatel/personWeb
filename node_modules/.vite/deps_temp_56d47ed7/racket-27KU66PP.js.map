{
  "version": 3,
  "sources": ["../../refractor/lang/racket.js"],
  "sourcesContent": ["// @ts-nocheck\nimport refractorScheme from './scheme.js'\nracket.displayName = 'racket'\nracket.aliases = ['rkt']\n\n/** @type {import('../core.js').Syntax} */\nexport default function racket(Prism) {\n  Prism.register(refractorScheme)\n  Prism.languages.racket = Prism.languages.extend('scheme', {\n    'lambda-parameter': {\n      // the racket lambda syntax is a lot more complex, so we won't even attempt to capture it.\n      // this will just prevent false positives of the `function` pattern\n      pattern: /([(\\[]lambda\\s+[(\\[])[^()\\[\\]'\\s]+/,\n      lookbehind: true\n    }\n  })\n  Prism.languages.insertBefore('racket', 'string', {\n    lang: {\n      pattern: /^#lang.+/m,\n      greedy: true,\n      alias: 'keyword'\n    }\n  })\n  Prism.languages.rkt = Prism.languages.racket\n}\n"],
  "mappings": ";;;;;;AAEA,OAAO,cAAc;AACrB,OAAO,UAAU,CAAC,KAAK;AAGR,SAAR,OAAwB,OAAO;AACpC,QAAM,SAAS,MAAe;AAC9B,QAAM,UAAU,SAAS,MAAM,UAAU,OAAO,UAAU;AAAA,IACxD,oBAAoB;AAAA;AAAA;AAAA,MAGlB,SAAS;AAAA,MACT,YAAY;AAAA,IACd;AAAA,EACF,CAAC;AACD,QAAM,UAAU,aAAa,UAAU,UAAU;AAAA,IAC/C,MAAM;AAAA,MACJ,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,OAAO;AAAA,IACT;AAAA,EACF,CAAC;AACD,QAAM,UAAU,MAAM,MAAM,UAAU;AACxC;",
  "names": []
}
