{
  "version": 3,
  "sources": ["../../refractor/lang/js-templates.js"],
  "sourcesContent": ["// @ts-nocheck\nimport refractorJavascript from './javascript.js'\njsTemplates.displayName = 'js-templates'\njsTemplates.aliases = []\n\n/** @type {import('../core.js').Syntax} */\nexport default function jsTemplates(Prism) {\n  Prism.register(refractorJavascript)\n  ;(function (Prism) {\n    var templateString = Prism.languages.javascript['template-string']\n\n    // see the pattern in prism-javascript.js\n    var templateLiteralPattern = templateString.pattern.source\n    var interpolationObject = templateString.inside['interpolation']\n    var interpolationPunctuationObject =\n      interpolationObject.inside['interpolation-punctuation']\n    var interpolationPattern = interpolationObject.pattern.source\n\n    /**\n     * Creates a new pattern to match a template string with a special tag.\n     *\n     * This will return `undefined` if there is no grammar with the given language id.\n     *\n     * @param {string} language The language id of the embedded language. E.g. `markdown`.\n     * @param {string} tag The regex pattern to match the tag.\n     * @returns {object | undefined}\n     * @example\n     * createTemplate('css', /\\bcss/.source);\n     */\n    function createTemplate(language, tag) {\n      if (!Prism.languages[language]) {\n        return undefined\n      }\n      return {\n        pattern: RegExp('((?:' + tag + ')\\\\s*)' + templateLiteralPattern),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          'template-punctuation': {\n            pattern: /^`|`$/,\n            alias: 'string'\n          },\n          'embedded-code': {\n            pattern: /[\\s\\S]+/,\n            alias: language\n          }\n        }\n      }\n    }\n    Prism.languages.javascript['template-string'] = [\n      // styled-jsx:\n      //   css`a { color: #25F; }`\n      // styled-components:\n      //   styled.h1`color: red;`\n      createTemplate(\n        'css',\n        /\\b(?:styled(?:\\([^)]*\\))?(?:\\s*\\.\\s*\\w+(?:\\([^)]*\\))*)*|css(?:\\s*\\.\\s*(?:global|resolve))?|createGlobalStyle|keyframes)/\n          .source\n      ),\n      // html`<p></p>`\n      // div.innerHTML = `<p></p>`\n      createTemplate('html', /\\bhtml|\\.\\s*(?:inner|outer)HTML\\s*\\+?=/.source),\n      // svg`<path fill=\"#fff\" d=\"M55.37 ...\"/>`\n      createTemplate('svg', /\\bsvg/.source),\n      // md`# h1`, markdown`## h2`\n      createTemplate('markdown', /\\b(?:markdown|md)/.source),\n      // gql`...`, graphql`...`, graphql.experimental`...`\n      createTemplate(\n        'graphql',\n        /\\b(?:gql|graphql(?:\\s*\\.\\s*experimental)?)/.source\n      ),\n      // sql`...`\n      createTemplate('sql', /\\bsql/.source),\n      // vanilla template string\n      templateString\n    ].filter(Boolean)\n\n    /**\n     * Returns a specific placeholder literal for the given language.\n     *\n     * @param {number} counter\n     * @param {string} language\n     * @returns {string}\n     */\n    function getPlaceholder(counter, language) {\n      return '___' + language.toUpperCase() + '_' + counter + '___'\n    }\n\n    /**\n     * Returns the tokens of `Prism.tokenize` but also runs the `before-tokenize` and `after-tokenize` hooks.\n     *\n     * @param {string} code\n     * @param {any} grammar\n     * @param {string} language\n     * @returns {(string|Token)[]}\n     */\n    function tokenizeWithHooks(code, grammar, language) {\n      var env = {\n        code: code,\n        grammar: grammar,\n        language: language\n      }\n      Prism.hooks.run('before-tokenize', env)\n      env.tokens = Prism.tokenize(env.code, env.grammar)\n      Prism.hooks.run('after-tokenize', env)\n      return env.tokens\n    }\n\n    /**\n     * Returns the token of the given JavaScript interpolation expression.\n     *\n     * @param {string} expression The code of the expression. E.g. `\"${42}\"`\n     * @returns {Token}\n     */\n    function tokenizeInterpolationExpression(expression) {\n      var tempGrammar = {}\n      tempGrammar['interpolation-punctuation'] = interpolationPunctuationObject\n\n      /** @type {Array} */\n      var tokens = Prism.tokenize(expression, tempGrammar)\n      if (tokens.length === 3) {\n        /**\n         * The token array will look like this\n         * [\n         *     [\"interpolation-punctuation\", \"${\"]\n         *     \"...\" // JavaScript expression of the interpolation\n         *     [\"interpolation-punctuation\", \"}\"]\n         * ]\n         */\n\n        var args = [1, 1]\n        args.push.apply(\n          args,\n          tokenizeWithHooks(tokens[1], Prism.languages.javascript, 'javascript')\n        )\n        tokens.splice.apply(tokens, args)\n      }\n      return new Prism.Token(\n        'interpolation',\n        tokens,\n        interpolationObject.alias,\n        expression\n      )\n    }\n\n    /**\n     * Tokenizes the given code with support for JavaScript interpolation expressions mixed in.\n     *\n     * This function has 3 phases:\n     *\n     * 1. Replace all JavaScript interpolation expression with a placeholder.\n     *    The placeholder will have the syntax of a identify of the target language.\n     * 2. Tokenize the code with placeholders.\n     * 3. Tokenize the interpolation expressions and re-insert them into the tokenize code.\n     *    The insertion only works if a placeholder hasn't been \"ripped apart\" meaning that the placeholder has been\n     *    tokenized as two tokens by the grammar of the embedded language.\n     *\n     * @param {string} code\n     * @param {object} grammar\n     * @param {string} language\n     * @returns {Token}\n     */\n    function tokenizeEmbedded(code, grammar, language) {\n      // 1. First filter out all interpolations\n\n      // because they might be escaped, we need a lookbehind, so we use Prism\n      /** @type {(Token|string)[]} */\n      var _tokens = Prism.tokenize(code, {\n        interpolation: {\n          pattern: RegExp(interpolationPattern),\n          lookbehind: true\n        }\n      })\n\n      // replace all interpolations with a placeholder which is not in the code already\n      var placeholderCounter = 0\n      /** @type {Object<string, string>} */\n      var placeholderMap = {}\n      var embeddedCode = _tokens\n        .map(function (token) {\n          if (typeof token === 'string') {\n            return token\n          } else {\n            var interpolationExpression = token.content\n            var placeholder\n            while (\n              code.indexOf(\n                (placeholder = getPlaceholder(placeholderCounter++, language))\n              ) !== -1\n            ) {\n              /* noop */\n            }\n            placeholderMap[placeholder] = interpolationExpression\n            return placeholder\n          }\n        })\n        .join('')\n\n      // 2. Tokenize the embedded code\n\n      var embeddedTokens = tokenizeWithHooks(embeddedCode, grammar, language)\n\n      // 3. Re-insert the interpolation\n\n      var placeholders = Object.keys(placeholderMap)\n      placeholderCounter = 0\n\n      /**\n       *\n       * @param {(Token|string)[]} tokens\n       * @returns {void}\n       */\n      function walkTokens(tokens) {\n        for (var i = 0; i < tokens.length; i++) {\n          if (placeholderCounter >= placeholders.length) {\n            return\n          }\n          var token = tokens[i]\n          if (typeof token === 'string' || typeof token.content === 'string') {\n            var placeholder = placeholders[placeholderCounter]\n            var s =\n              typeof token === 'string'\n                ? token\n                : /** @type {string} */ token.content\n            var index = s.indexOf(placeholder)\n            if (index !== -1) {\n              ++placeholderCounter\n              var before = s.substring(0, index)\n              var middle = tokenizeInterpolationExpression(\n                placeholderMap[placeholder]\n              )\n              var after = s.substring(index + placeholder.length)\n              var replacement = []\n              if (before) {\n                replacement.push(before)\n              }\n              replacement.push(middle)\n              if (after) {\n                var afterTokens = [after]\n                walkTokens(afterTokens)\n                replacement.push.apply(replacement, afterTokens)\n              }\n              if (typeof token === 'string') {\n                tokens.splice.apply(tokens, [i, 1].concat(replacement))\n                i += replacement.length - 1\n              } else {\n                token.content = replacement\n              }\n            }\n          } else {\n            var content = token.content\n            if (Array.isArray(content)) {\n              walkTokens(content)\n            } else {\n              walkTokens([content])\n            }\n          }\n        }\n      }\n      walkTokens(embeddedTokens)\n      return new Prism.Token(\n        language,\n        embeddedTokens,\n        'language-' + language,\n        code\n      )\n    }\n\n    /**\n     * The languages for which JS templating will handle tagged template literals.\n     *\n     * JS templating isn't active for only JavaScript but also related languages like TypeScript, JSX, and TSX.\n     */\n    var supportedLanguages = {\n      javascript: true,\n      js: true,\n      typescript: true,\n      ts: true,\n      jsx: true,\n      tsx: true\n    }\n    Prism.hooks.add('after-tokenize', function (env) {\n      if (!(env.language in supportedLanguages)) {\n        return\n      }\n\n      /**\n       * Finds and tokenizes all template strings with an embedded languages.\n       *\n       * @param {(Token | string)[]} tokens\n       * @returns {void}\n       */\n      function findTemplateStrings(tokens) {\n        for (var i = 0, l = tokens.length; i < l; i++) {\n          var token = tokens[i]\n          if (typeof token === 'string') {\n            continue\n          }\n          var content = token.content\n          if (!Array.isArray(content)) {\n            if (typeof content !== 'string') {\n              findTemplateStrings([content])\n            }\n            continue\n          }\n          if (token.type === 'template-string') {\n            /**\n             * A JavaScript template-string token will look like this:\n             *\n             * [\"template-string\", [\n             *     [\"template-punctuation\", \"`\"],\n             *     (\n             *         An array of \"string\" and \"interpolation\" tokens. This is the simple string case.\n             *         or\n             *         [\"embedded-code\", \"...\"] This is the token containing the embedded code.\n             *                                  It also has an alias which is the language of the embedded code.\n             *     ),\n             *     [\"template-punctuation\", \"`\"]\n             * ]]\n             */\n\n            var embedded = content[1]\n            if (\n              content.length === 3 &&\n              typeof embedded !== 'string' &&\n              embedded.type === 'embedded-code'\n            ) {\n              // get string content\n              var code = stringContent(embedded)\n              var alias = embedded.alias\n              var language = Array.isArray(alias) ? alias[0] : alias\n              var grammar = Prism.languages[language]\n              if (!grammar) {\n                // the embedded language isn't registered.\n                continue\n              }\n              content[1] = tokenizeEmbedded(code, grammar, language)\n            }\n          } else {\n            findTemplateStrings(content)\n          }\n        }\n      }\n      findTemplateStrings(env.tokens)\n    })\n\n    /**\n     * Returns the string content of a token or token stream.\n     *\n     * @param {string | Token | (string | Token)[]} value\n     * @returns {string}\n     */\n    function stringContent(value) {\n      if (typeof value === 'string') {\n        return value\n      } else if (Array.isArray(value)) {\n        return value.map(stringContent).join('')\n      } else {\n        return stringContent(value.content)\n      }\n    }\n  })(Prism)\n}\n"],
  "mappings": "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",
  "names": ["Prism"]
}
