{
  "version": 3,
  "sources": ["../../refractor/lang/odin.js"],
  "sourcesContent": ["// @ts-nocheck\nodin.displayName = 'odin'\nodin.aliases = []\n\n/** @type {import('../core.js').Syntax} */\nexport default function odin(Prism) {\n  ;(function (Prism) {\n    var escapes =\n      /\\\\(?:[\"'\\\\abefnrtv]|0[0-7]{2}|U[\\dA-Fa-f]{6}|u[\\dA-Fa-f]{4}|x[\\dA-Fa-f]{2})/\n    Prism.languages.odin = {\n      /**\n       * The current implementation supports only 1 level of nesting.\n       *\n       * @author Michael Schmidt\n       * @author edukisto\n       */\n      comment: [\n        {\n          pattern:\n            /\\/\\*(?:[^/*]|\\/(?!\\*)|\\*(?!\\/)|\\/\\*(?:\\*(?!\\/)|[^*])*(?:\\*\\/|$))*(?:\\*\\/|$)/,\n          greedy: true\n        },\n        {\n          pattern: /#![^\\n\\r]*/,\n          greedy: true\n        },\n        {\n          pattern: /\\/\\/[^\\n\\r]*/,\n          greedy: true\n        }\n      ],\n      /**\n       * Should be found before strings because of '\"'\"- and '`'`-like sequences.\n       */\n      char: {\n        pattern: /'(?:\\\\(?:.|[0Uux][0-9A-Fa-f]{1,6})|[^\\n\\r'\\\\])'/,\n        greedy: true,\n        inside: {\n          symbol: escapes\n        }\n      },\n      string: [\n        {\n          pattern: /`[^`]*`/,\n          greedy: true\n        },\n        {\n          pattern: /\"(?:\\\\.|[^\\n\\r\"\\\\])*\"/,\n          greedy: true,\n          inside: {\n            symbol: escapes\n          }\n        }\n      ],\n      directive: {\n        pattern: /#\\w+/,\n        alias: 'property'\n      },\n      number:\n        /\\b0(?:b[01_]+|d[\\d_]+|h_*(?:(?:(?:[\\dA-Fa-f]_*){8}){1,2}|(?:[\\dA-Fa-f]_*){4})|o[0-7_]+|x[\\dA-F_a-f]+|z[\\dAB_ab]+)\\b|(?:\\b\\d+(?:\\.(?!\\.)\\d*)?|\\B\\.\\d+)(?:[Ee][+-]?\\d*)?[ijk]?(?!\\w)/,\n      discard: {\n        pattern: /\\b_\\b/,\n        alias: 'keyword'\n      },\n      'procedure-definition': {\n        pattern: /\\b\\w+(?=[ \\t]*(?::\\s*){2}proc\\b)/,\n        alias: 'function'\n      },\n      keyword:\n        /\\b(?:asm|auto_cast|bit_set|break|case|cast|context|continue|defer|distinct|do|dynamic|else|enum|fallthrough|for|foreign|if|import|in|map|matrix|not_in|or_else|or_return|package|proc|return|struct|switch|transmute|typeid|union|using|when|where)\\b/,\n      /**\n       * false, nil, true can be used as procedure names. \"_\" and keywords can't.\n       */\n      'procedure-name': {\n        pattern: /\\b\\w+(?=[ \\t]*\\()/,\n        alias: 'function'\n      },\n      boolean: /\\b(?:false|nil|true)\\b/,\n      'constant-parameter-sign': {\n        pattern: /\\$/,\n        alias: 'important'\n      },\n      undefined: {\n        pattern: /---/,\n        alias: 'operator'\n      },\n      arrow: {\n        pattern: /->/,\n        alias: 'punctuation'\n      },\n      operator: /\\+\\+|--|\\.\\.[<=]?|(?:&~|[-!*+/=~]|[%&<>|]{1,2})=?|[?^]/,\n      punctuation: /[(),.:;@\\[\\]{}]/\n    }\n  })(Prism)\n}\n"],
  "mappings": ";;;AACA,KAAK,cAAc;AACnB,KAAK,UAAU,CAAC;AAGD,SAAR,KAAsB,OAAO;AAClC;AAAC,GAAC,SAAUA,QAAO;AACjB,QAAI,UACF;AACF,IAAAA,OAAM,UAAU,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOrB,SAAS;AAAA,QACP;AAAA,UACE,SACE;AAAA,UACF,QAAQ;AAAA,QACV;AAAA,QACA;AAAA,UACE,SAAS;AAAA,UACT,QAAQ;AAAA,QACV;AAAA,QACA;AAAA,UACE,SAAS;AAAA,UACT,QAAQ;AAAA,QACV;AAAA,MACF;AAAA;AAAA;AAAA;AAAA,MAIA,MAAM;AAAA,QACJ,SAAS;AAAA,QACT,QAAQ;AAAA,QACR,QAAQ;AAAA,UACN,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,MACA,QAAQ;AAAA,QACN;AAAA,UACE,SAAS;AAAA,UACT,QAAQ;AAAA,QACV;AAAA,QACA;AAAA,UACE,SAAS;AAAA,UACT,QAAQ;AAAA,UACR,QAAQ;AAAA,YACN,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAAA,MACA,WAAW;AAAA,QACT,SAAS;AAAA,QACT,OAAO;AAAA,MACT;AAAA,MACA,QACE;AAAA,MACF,SAAS;AAAA,QACP,SAAS;AAAA,QACT,OAAO;AAAA,MACT;AAAA,MACA,wBAAwB;AAAA,QACtB,SAAS;AAAA,QACT,OAAO;AAAA,MACT;AAAA,MACA,SACE;AAAA;AAAA;AAAA;AAAA,MAIF,kBAAkB;AAAA,QAChB,SAAS;AAAA,QACT,OAAO;AAAA,MACT;AAAA,MACA,SAAS;AAAA,MACT,2BAA2B;AAAA,QACzB,SAAS;AAAA,QACT,OAAO;AAAA,MACT;AAAA,MACA,WAAW;AAAA,QACT,SAAS;AAAA,QACT,OAAO;AAAA,MACT;AAAA,MACA,OAAO;AAAA,QACL,SAAS;AAAA,QACT,OAAO;AAAA,MACT;AAAA,MACA,UAAU;AAAA,MACV,aAAa;AAAA,IACf;AAAA,EACF,GAAG,KAAK;AACV;",
  "names": ["Prism"]
}
